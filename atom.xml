<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yepurs</title>
  
  <subtitle>Stay cautious with what you can control, and optimistic about what you can not</subtitle>
  <link href="https://yepu-yang.github.io/atom.xml" rel="self"/>
  
  <link href="https://yepu-yang.github.io/"/>
  <updated>2024-10-07T09:29:56.111Z</updated>
  <id>https://yepu-yang.github.io/</id>
  
  <author>
    <name>yepu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初学FPGA 方波的双边沿检测</title>
    <link href="https://yepu-yang.github.io/2024/10/07/%E5%88%9D%E5%AD%A6FPGA-%E6%96%B9%E6%B3%A2%E7%9A%84%E5%8F%8C%E8%BE%B9%E6%B2%BF%E6%A3%80%E6%B5%8B/"/>
    <id>https://yepu-yang.github.io/2024/10/07/%E5%88%9D%E5%AD%A6FPGA-%E6%96%B9%E6%B3%A2%E7%9A%84%E5%8F%8C%E8%BE%B9%E6%B2%BF%E6%A3%80%E6%B5%8B/</id>
    <published>2024-10-07T09:19:40.000Z</published>
    <updated>2024-10-07T09:29:56.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方波的双边沿检测"><a href="#方波的双边沿检测" class="headerlink" title="方波的双边沿检测"></a>方波的双边沿检测</h1><hr><aside>💡<p>输入信号：一个随机方波信号signal_in, 时钟信号 clk, 重置操作 rst_n</p><p>输出信号：对应方波上升沿、下降沿、双边沿的脉冲信号</p></aside><hr><h3 id="错误的想法"><a href="#错误的想法" class="headerlink" title="错误的想法"></a><strong>错误的想法</strong></h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> signal_in <span class="keyword">or</span> <span class="keyword">negedge</span> signal_in) <span class="keyword">begin</span></span><br><span class="line"><span class="comment">// 边沿检测逻辑</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li><strong>信号同步性问题</strong>：F<strong>PGA通常是时钟驱动的，需要在时钟的上升沿或下降沿同步检测信号</strong>。异步检测输入信号可能会导致不可预测的行为和亚稳态问题。</li><li><strong>Verilog合成器不支持</strong>：<code>posedge</code> 和 <code>negedge</code> 主要用于时钟信号的边沿检测，大多数合成工具不允许对非时钟信号（如 <code>signal_in</code>）直接使用这类边沿检测。</li></ul><hr><h3 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a><strong>实现逻辑</strong></h3><p>时钟频率大于信号的变化频率</p><ol><li>时钟信号驱动，每当时钟的上升沿到临时，检测信号signal_in的状态，并使用寄存器进行存储</li><li>当寄存器为“01”时，为上升沿信号；当寄存器状态为“10”说明检测到下降沿信号，“11”或者“00”则表示未检测到边沿变化</li></ol><p>检测的精度取决于时钟频率：时钟频率越高，检测到的边沿与实际边沿之间的误差就越小。然而，即便如此，仍可能存在最多一个时钟周期的延迟。</p><hr><h3 id="过程中的错误记录"><a href="#过程中的错误记录" class="headerlink" title="过程中的错误记录"></a><strong>过程中的错误记录</strong></h3><p>testbench中的always模块错误使用：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> <span class="keyword">begin</span></span><br><span class="line">#<span class="number">10</span> clk=~clk;</span><br><span class="line">#<span class="number">100</span> signal_in=~signal_in;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这两种表达方式在testbench中有以下区别：</p><ul><li>左侧代码中，实际上clk和signal_in的翻转周期为 110个时间单位。这是因为在同一个always块中，#10和#100的延迟是累加的。</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> <span class="keyword">begin</span> #<span class="number">10</span> clk=~clk ;<span class="keyword">end</span></span><br><span class="line"><span class="keyword">always</span> <span class="keyword">begin</span></span><br><span class="line"> #<span class="number">100</span> signal_in=~signal_in;<span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li><strong>第二种方式（右侧代码）：</strong>使用两个独立的always块分别控制clk和signal_in。clk和signal_in的翻转周期分别为10和100个单位</li></ul><h3 id="亚稳态问题"><a href="#亚稳态问题" class="headerlink" title="亚稳态问题"></a>亚稳态问题</h3><p><strong>如果输入信号和时钟信号不同步，触发器可能在时钟的上升沿进行采样时，信号正在快速变化，导致触发器无法确定采样值；</strong>解决方法：级联触发器 第一个触发器可能会进入亚稳态，但随后的触发器有更多时间来解析信号，从而降低了亚稳态传播到系统其他部分的概率。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">    stage1 &lt;= async_signal;</span><br><span class="line">    stage2 &lt;= stage1;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="keyword">module</span> wave_edge_detect(</span><br><span class="line"><span class="keyword">input</span> signal_in ,</span><br><span class="line"><span class="keyword">input</span> clk,</span><br><span class="line"><span class="keyword">input</span> rst_n,</span><br><span class="line"><span class="keyword">output</span>  pose_pulse,</span><br><span class="line"><span class="keyword">output</span>  nedge_pulse,</span><br><span class="line"><span class="keyword">output</span>  both_pulse</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> reg_1 ;</span><br><span class="line"><span class="keyword">reg</span> reg_2;</span><br><span class="line"><span class="keyword">reg</span> reg_3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> (rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">//reg_2保存上一个signal的值，reg_1为新时刻的signal_in的值</span></span><br><span class="line">reg_2&lt;=reg_3;</span><br><span class="line"><span class="comment">//输入信号上级联一个触发器</span></span><br><span class="line">reg_1&lt;=signal_in;</span><br><span class="line">reg_3&lt;=reg_1;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">reg_1&lt;=<span class="number">1&#x27;b0</span>;</span><br><span class="line">reg_2&lt;=<span class="number">1&#x27;b0</span>;</span><br><span class="line">reg_3&lt;=<span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> pose_pulse = reg_3 &amp; ~reg_2;</span><br><span class="line"><span class="keyword">assign</span> nedge_pulse = ~reg_3 &amp; reg_2;</span><br><span class="line"><span class="keyword">assign</span> both_pulse= reg_3^reg_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="仿真代码"><a href="#仿真代码" class="headerlink" title="仿真代码"></a>仿真代码</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="keyword">module</span> testbench( );</span><br><span class="line"><span class="keyword">reg</span> clk;</span><br><span class="line"><span class="keyword">reg</span> rst_n;</span><br><span class="line"><span class="keyword">reg</span> signal_in;</span><br><span class="line"><span class="keyword">wire</span> pose_pulse;</span><br><span class="line"><span class="keyword">wire</span> nedge_pulse;</span><br><span class="line"><span class="keyword">wire</span> both_pulse;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入信号初始化</span></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">clk=<span class="number">1&#x27;b0</span>;</span><br><span class="line">rst_n=<span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line">signal_in=<span class="number">1&#x27;b0</span>;</span><br><span class="line">#<span class="number">15</span> rst_n=<span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入信号产生</span></span><br><span class="line"><span class="keyword">always</span> <span class="keyword">begin</span> #<span class="number">10</span> clk=~clk;<span class="keyword">end</span></span><br><span class="line"><span class="keyword">always</span> <span class="keyword">begin</span> #<span class="number">100</span> signal_in=~signal_in;<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">wave_edge_detect detect_instance(</span><br><span class="line"><span class="variable">.signal_in</span> (signal_in) ,</span><br><span class="line"><span class="variable">.clk</span>(clk),</span><br><span class="line"><span class="variable">.rst_n</span>(rst_n),</span><br><span class="line"></span><br><span class="line"><span class="variable">.pose_pulse</span>(pose_pulse),</span><br><span class="line"><span class="variable">.nedge_pulse</span>(nedge_pulse),</span><br><span class="line"><span class="variable">.both_pulse</span>(both_pulse)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a>仿真结果</h3><p><img src="https://i.postimg.cc/L5fhJHH6/blog2.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;方波的双边沿检测&quot;&gt;&lt;a href=&quot;#方波的双边沿检测&quot; class=&quot;headerlink&quot; title=&quot;方波的双边沿检测&quot;&gt;&lt;/a&gt;方波的双边沿检测&lt;/h1&gt;&lt;hr&gt;
&lt;aside&gt;
💡

&lt;p&gt;输入信号：一个随机方波信号signal_in, 时钟信号 </summary>
      
    
    
    
    
    <category term="FPGA" scheme="https://yepu-yang.github.io/tags/FPGA/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo和keep主题快速搭建blog</title>
    <link href="https://yepu-yang.github.io/2024/10/06/%E4%BD%BF%E7%94%A8hexo%E5%92%8Ckeep%E4%B8%BB%E9%A2%98%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAblog/"/>
    <id>https://yepu-yang.github.io/2024/10/06/%E4%BD%BF%E7%94%A8hexo%E5%92%8Ckeep%E4%B8%BB%E9%A2%98%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAblog/</id>
    <published>2024-10-06T12:54:36.000Z</published>
    <updated>2024-10-06T14:01:50.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用hexo和keep主题搭建blog"><a href="#使用hexo和keep主题搭建blog" class="headerlink" title="使用hexo和keep主题搭建blog"></a>使用hexo和keep主题搭建blog</h1><h2 id="hexo-准备"><a href="#hexo-准备" class="headerlink" title="hexo 准备"></a>hexo 准备</h2><p>参考 <a href="https://blog.fiveth.cc/p/bb32">跟着成功实践了的链接</a> 一步一步来，这里不再赘述。</p><h2 id="keep主题安装以及配置"><a href="#keep主题安装以及配置" class="headerlink" title="keep主题安装以及配置"></a>keep主题安装以及配置</h2><p>参考 <a href="https://keep-docs.xpoet.cn/basis/get-start/install-theme.html">keep主题官方文档</a></p><h2 id="过程中遇到的问题"><a href="#过程中遇到的问题" class="headerlink" title="过程中遇到的问题"></a>过程中遇到的问题</h2><h3 id="本地成功预览，但是网页端格式混乱"><a href="#本地成功预览，但是网页端格式混乱" class="headerlink" title="本地成功预览，但是网页端格式混乱"></a>本地成功预览，但是网页端格式混乱</h3><p>解决方法：<br>1、在_config.yml中配置url为你的域名，例如：url: <a href="https://blog.fiveth.cc/">https://blog.fiveth.cc</a> 并添加root: &#x2F; 注意这里有空格；<br>2、依次执行下面的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>3、前往你的github仓库，刷新，确保css文件已经更新&#x2F;上传；打开你的域名，查看是否已经生效。有时需要shift+f5强制刷新几次后出现更新后的结果。</p><h3 id="Hexo启动页面不显示"><a href="#Hexo启动页面不显示" class="headerlink" title="Hexo启动页面不显示"></a>Hexo启动页面不显示</h3><p>问题：网页打开后仅仅显示这一段文字：extends includes&#x2F;layout.pug block content include includes&#x2F;recent-posts.pug include<br>解决方法：执行下面的命令后，hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><h3 id="git-push时报错"><a href="#git-push时报错" class="headerlink" title="git push时报错"></a>git push时报错</h3><p>问题：git push时报错：permission denied,检查是不是配置的仓库账号和自己的git账号不一致<br>解决方法：打开github desktop，点击头像-open git settings-account&#x2F;git中进行账号设置，重新push即可</p><h3 id="图片上传url"><a href="#图片上传url" class="headerlink" title="图片上传url"></a>图片上传url</h3><p>使用<a href="https://postimages.org/">postimage</a>上传图片，获取url</p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p><a href="https://hexo.io/zh-cn/docs/commands">hexo文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;postName&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo clean <span class="comment">#清除缓存</span></span><br><span class="line">hexo g <span class="comment">#生成静态文件    </span></span><br><span class="line">hexo s <span class="comment">#启动本地服务，可获得预览效果</span></span><br><span class="line">hexo d <span class="comment">#部署到远程仓库</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用hexo和keep主题快速搭建blog,以及过程中的小问题解决</summary>
    
    
    
    <category term="blog use" scheme="https://yepu-yang.github.io/categories/blog-use/"/>
    
    
    <category term="create blog" scheme="https://yepu-yang.github.io/tags/create-blog/"/>
    
  </entry>
  
</feed>
