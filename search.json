[{"title":"初学FPGA 方波的双边沿检测","url":"/yepu-yang.github.io/2024/10/07/%E5%88%9D%E5%AD%A6FPGA-%E6%96%B9%E6%B3%A2%E7%9A%84%E5%8F%8C%E8%BE%B9%E6%B2%BF%E6%A3%80%E6%B5%8B/","content":"方波的双边沿检测\n\n💡\n\n输入信号：一个随机方波信号signal_in, 时钟信号 clk, 重置操作 rst_n\n输出信号：对应方波上升沿、下降沿、双边沿的脉冲信号\n\n\n\n错误的想法always @(posedge signal_in or negedge signal_in) begin// 边沿检测逻辑end\n\n\n信号同步性问题：FPGA通常是时钟驱动的，需要在时钟的上升沿或下降沿同步检测信号。异步检测输入信号可能会导致不可预测的行为和亚稳态问题。\nVerilog合成器不支持：posedge 和 negedge 主要用于时钟信号的边沿检测，大多数合成工具不允许对非时钟信号（如 signal_in）直接使用这类边沿检测。\n\n\n实现逻辑时钟频率大于信号的变化频率\n\n时钟信号驱动，每当时钟的上升沿到临时，检测信号signal_in的状态，并使用寄存器进行存储\n当寄存器为“01”时，为上升沿信号；当寄存器状态为“10”说明检测到下降沿信号，“11”或者“00”则表示未检测到边沿变化\n\n检测的精度取决于时钟频率：时钟频率越高，检测到的边沿与实际边沿之间的误差就越小。然而，即便如此，仍可能存在最多一个时钟周期的延迟。\n\n过程中的错误记录testbench中的always模块错误使用：\nalways begin#10 clk=~clk;#100 signal_in=~signal_in;end\n\n这两种表达方式在testbench中有以下区别：\n\n左侧代码中，实际上clk和signal_in的翻转周期为 110个时间单位。这是因为在同一个always块中，#10和#100的延迟是累加的。\n\nalways begin #10 clk=~clk ;endalways begin #100 signal_in=~signal_in;end\n\n\n第二种方式（右侧代码）：使用两个独立的always块分别控制clk和signal_in。clk和signal_in的翻转周期分别为10和100个单位\n\n亚稳态问题如果输入信号和时钟信号不同步，触发器可能在时钟的上升沿进行采样时，信号正在快速变化，导致触发器无法确定采样值；解决方法：级联触发器 第一个触发器可能会进入亚稳态，但随后的触发器有更多时间来解析信号，从而降低了亚稳态传播到系统其他部分的概率。\nalways @(posedge clk) begin    stage1 &lt;= async_signal;    stage2 &lt;= stage1;end\n\n实验代码`timescale 1ns / 1psmodule wave_edge_detect(input signal_in ,input clk,input rst_n,output  pose_pulse,output  nedge_pulse,output  both_pulse);reg reg_1 ;reg reg_2;reg reg_3;always@ (posedge clk or posedge rst_n)beginif (rst_n)begin//reg_2保存上一个signal的值，reg_1为新时刻的signal_in的值reg_2&lt;=reg_3;//输入信号上级联一个触发器reg_1&lt;=signal_in;reg_3&lt;=reg_1;endelsebeginreg_1&lt;=1&#x27;b0;reg_2&lt;=1&#x27;b0;reg_3&lt;=1&#x27;b0;endendassign pose_pulse = reg_3 &amp; ~reg_2;assign nedge_pulse = ~reg_3 &amp; reg_2;assign both_pulse= reg_3^reg_2;endmodule\n\n仿真代码`timescale 1ns / 1psmodule testbench( );reg clk;reg rst_n;reg signal_in;wire pose_pulse;wire nedge_pulse;wire both_pulse;// 输入信号初始化initial beginclk=1&#x27;b0;rst_n=1&#x27;b0;signal_in=1&#x27;b0;#15 rst_n=1&#x27;b1;end//输入信号产生always begin #10 clk=~clk;endalways begin #100 signal_in=~signal_in;endwave_edge_detect detect_instance(.signal_in (signal_in) ,.clk(clk),.rst_n(rst_n),.pose_pulse(pose_pulse),.nedge_pulse(nedge_pulse),.both_pulse(both_pulse));endmodule\n\n仿真结果\n","tags":["FPGA"]},{"title":"使用hexo和keep主题快速搭建blog","url":"/yepu-yang.github.io/2024/10/06/%E4%BD%BF%E7%94%A8hexo%E5%92%8Ckeep%E4%B8%BB%E9%A2%98%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAblog/","content":"使用hexo和keep主题搭建bloghexo 准备参考 跟着成功实践了的链接 一步一步来，这里不再赘述。\nkeep主题安装以及配置参考 keep主题官方文档\n过程中遇到的问题本地成功预览，但是网页端格式混乱解决方法：1、在_config.yml中配置url为你的域名，例如：url: https://blog.fiveth.cc 并添加root: &#x2F; 注意这里有空格；2、依次执行下面的指令\nhexo cleanhexo ghexo d\n3、前往你的github仓库，刷新，确保css文件已经更新&#x2F;上传；打开你的域名，查看是否已经生效。有时需要shift+f5强制刷新几次后出现更新后的结果。\nHexo启动页面不显示问题：网页打开后仅仅显示这一段文字：extends includes&#x2F;layout.pug block content include includes&#x2F;recent-posts.pug include解决方法：执行下面的命令后，hexo clean &amp;&amp; hexo g &amp;&amp; hexo d\nnpm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive\ngit push时报错问题：git push时报错：permission denied,检查是不是配置的仓库账号和自己的git账号不一致解决方法：打开github desktop，点击头像-open git settings-account&#x2F;git中进行账号设置，重新push即可\n图片上传url使用postimage上传图片，获取url\n常用指令hexo文档\nhexo new &quot;postName&quot; #新建文章hexo clean #清除缓存hexo g #生成静态文件    hexo s #启动本地服务，可获得预览效果hexo d #部署到远程仓库\n\n\n","categories":["blog use"],"tags":["create blog"]}]